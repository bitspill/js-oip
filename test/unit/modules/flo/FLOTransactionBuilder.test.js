import { ECPair } from 'bitcoinjs-lib'

import FLOTransactionBuilder from '../../../../src/modules/flo/FLOTransactionBuilder'
import { network } from '../../../../src/config/networks/flo/testnet'

import { FLODATA_MAX_LEN } from '../../../../src/modules/flo/FLOTransaction'

const SAT_PER_FLO = 100000000

// Test addresses, please don't spend any of these coins!
let publicAddress = 'oZdUBH31q6Zesnx6mSW57nNCo8XzJ2b3cd'
let wif = 'cP3LMhqT32oBKJcf8hBRDUAZopQtcajX4ZF2bVoxzakNkmnj6Wb1'

// Sample Data
let sampleInput = {
  txid: 'd95b264f29d09bdeae76a995921579d74597d83228795637db16fcea21653375',
  vout: 1
}

describe('Build Transaction', () => {
  test('No floData', () => {
    let txb = new FLOTransactionBuilder(network)

    // Add our single input
    txb.addInput(sampleInput.txid, sampleInput.vout)
    // Add our output
    txb.addOutput(publicAddress, parseInt(0.99 * SAT_PER_FLO))
    // Add our floData
    // txb.setFloData("Abc")

    // Sign our transaction using the local `flosigner` at `src/config/networks/flo/flosigner.js`
    txb.sign(0, ECPair.fromWIF(wif, network))

    // Build the hex
    let builtHex
    try {
      builtHex = txb.build().toHex()
    } catch (err) {
      throw new Error(`Unable to build Transaction Hex!: ${err}`)
    }

    expect(builtHex).toBe('020000000175336521eafc16db3756792832d89745d779159295a976aede9bd0294f265bd9010000006a473044022017d4538ea182cc3a8fae0420382fbdb3f9bd9e1c7769e74e1b0d152ee9e52caa02207018898584590e4d83b844123ed4d944555a46ca33c00025416fe76db8f03ee601210235dbc5de310bde64bf53276d93f5347d55bd5b1f64c4885039b5bfd8afe2dfa7ffffffff01c09ee605000000001976a914b7d946f6088b9d05b5249e8503f9d202bfffc01588ac0000000000')
  })
  test('Partial floData', () => {
    let txb = new FLOTransactionBuilder(network)

    // Add our single input
    txb.addInput(sampleInput.txid, sampleInput.vout)
    // Add our output
    txb.addOutput(publicAddress, parseInt(0.99 * SAT_PER_FLO))
    // Add our floData
    let floData = ''
    while (Buffer.from(floData).length < 540) {
      floData += 'a'
    }
    txb.setFloData(floData)

    // Sign our transaction using the local `flosigner` at `src/config/networks/flo/flosigner.js`
    txb.sign(0, ECPair.fromWIF(wif, network))

    // Build the hex
    let builtHex
    try {
      builtHex = txb.build().toHex()
    } catch (err) {
      throw new Error(`Unable to build Transaction Hex!: ${err}`)
    }

    expect(builtHex).toBe('020000000175336521eafc16db3756792832d89745d779159295a976aede9bd0294f265bd9010000006a4730440220353757d5a199e16b7176343a99cfa938e2cc42318a5510353f1aa4db2e9c21a80220379aa4c2533e4d3ef9853073a157e630b8db480ef616ce0ab540d8f8a721a26f01210235dbc5de310bde64bf53276d93f5347d55bd5b1f64c4885039b5bfd8afe2dfa7ffffffff01c09ee605000000001976a914b7d946f6088b9d05b5249e8503f9d202bfffc01588ac00000000fd1c
  })
  test('Full floData', () => {
    let txb = new FLOTransactionBuilder(network)

    // Add our single input
    txb.addInput(sampleInput.txid, sampleInput.vout)
    // Add our output
    txb.addOutput(publicAddress, parseInt(0.99 * SAT_PER_FLO))
    // Add our floData
    let floData = ''
    while (Buffer.from(floData).length < FLODATA_MAX_LEN) {
      floData += 'a'
    }
    txb.setFloData(floData)

    // Sign our transaction using the local `flosigner` at `src/config/networks/flo/flosigner.js`
    txb.sign(0, ECPair.fromWIF(wif, network))

    // Build the hex
    let builtHex
    try {
      builtHex = txb.build().toHex()
    } catch (err) {
      throw new Error(`Unable to build Transaction Hex!: ${err}`)
    }

    expect(builtHex).toBe('020000000175336521eafc16db3756792832d89745d779159295a976aede9bd0294f265bd9010000006b483045022100febb729c67f21acb0b98be6669c91954e0f4b6b73711e910a376c88f7324f1cf02202d97dc6cb53a1672e49b0bfb8dab2309e10ce9cd0859a022c37466b9f745f5a601210235dbc5de310bde64bf53276d93f5347d55bd5b1f64c4885039b5bfd8afe2dfa7ffffffff01c09ee605000000001976a914b7d946f6088b9d05b5249e8503f9d202bfffc01588ac00000000fd
  })
})
